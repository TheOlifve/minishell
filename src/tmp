int	child1(t_ms *ms, int i)
{
	int	j;

	if (dup2(ms->fd[1], STDOUT) == -1)
	{
		if (ms->fd[0])
			close(ms->fd[0]);
		if (ms->fd[1])
			close(ms->fd[1]);
		perror("minishell_error1");
		return (1);
	}
	close(ms->fd[0]);
	close(ms->fd[1]);
	j = cmd_find(ms, i);
	if (j == 1)
		perror("minishell error");
	else if (j == 2)
		exec_pipe(ms, i);
	return (0);
}

int	child2(t_ms *ms, int i)
{
	int	j;

	if (dup2(ms->fd[0], STDIN) == -1)
	{
		if (ms->fd[0])
			close(ms->fd[0]);
		if (ms->fd[1])
			close(ms->fd[1]);
		perror("minishell_error");
		return (1);
	}
	close(ms->fd[0]);
	close(ms->fd[1]);
	j = cmd_find(ms, i);
	if (j == 1)
		perror("minishell error");
	else if (j == 2)
		exec_pipe(ms, i);
	return (0);
}

void	ft_pipe(t_ms *ms, int i)
{
	int	pid1;
	int	pid2;

	if (pipe(ms->fd) == -1)
		perror("MINISHELL ERROR - ");
	pid1 = fork();
	if (pid1 == -1)
		perror("MINISHELL ERROR - ");
	else if (pid1 == 0)
		child1(ms, i);
	// else if (pid1 != 0)
	// {
	// 	close(ms->fd[0]);
	// 	close(ms->fd[1]);
	// }
	pid2 = fork();
	if (pid2 == -1)
		perror("MINISHELL ERROR - ");
	else if (pid2 == 0)
		child2(ms, i + 1);
	close(ms->fd[0]);
	close(ms->fd[1]);
	while (wait(NULL) != -1)
		;
	// else if (pid2 != 0)
	// {
	// 	close(ms->fd[0]);
	// 	close(ms->fd[1]);
	// }
}

void	exec_pipe(t_ms *ms, int i)
{
	char	**cmd;
	// int	j;

	// j = -1;
	cmd = cmd_builder(ms, i);
	// while (cmd[++j])
		// dprintf(2, "%s\n", cmd[j]);
	execve (cmd[0], cmd, ms->envp1);
	printf("minishell: %s: command not found\n", cmd[0]);
	exit_mode(7, ms);
}